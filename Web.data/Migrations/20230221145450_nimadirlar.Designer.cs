// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Web.data.AdDbConection;

#nullable disable

namespace Web.data.Migrations
{
    [DbContext(typeof(AppDbcontext))]
    [Migration("20230221145450_nimadirlar")]
    partial class nimadirlar
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            RoleId = 1L
                        },
                        new
                        {
                            UserId = 2L,
                            RoleId = 2L
                        },
                        new
                        {
                            UserId = 3L,
                            RoleId = 2L
                        },
                        new
                        {
                            UserId = 4L,
                            RoleId = 1L
                        },
                        new
                        {
                            UserId = 5L,
                            RoleId = 2L
                        },
                        new
                        {
                            UserId = 6L,
                            RoleId = 1L
                        },
                        new
                        {
                            UserId = 7L,
                            RoleId = 2L
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Web.data.model.ApiUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "056cf2f5-3cf9-4de0-bf74-f97e399271c8",
                            EmailConfirmed = false,
                            FirstName = "Mansur",
                            LastName = "Xamrayev",
                            LockoutEnabled = false,
                            NormalizedUserName = "KHMANSUR",
                            PasswordHash = "AQAAAAIAAYagAAAAEOE60YG0K/dD+EKdwnpvlWrCZXjeeLKYlvkik0zEhFn84EkBeZ+rHlO1z7fOoe6XXA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Khmansur"
                        },
                        new
                        {
                            Id = 2L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "24485fbf-ef5b-48c1-9112-ae838a1f7823",
                            EmailConfirmed = false,
                            FirstName = "Aziz",
                            LastName = "A'zamjonov",
                            LockoutEnabled = false,
                            NormalizedUserName = "AZIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAECVejdr1q/hB84+e8VHAJ21TrSEoXRZzCZlr2vbj7PSVxoa4oaXfMjZOd2KARs0giA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Aziz"
                        },
                        new
                        {
                            Id = 3L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "69aa9f53-dc0e-49bd-873c-07049a0d01a9",
                            EmailConfirmed = false,
                            FirstName = "Jaloliddin",
                            LastName = "Axmedov",
                            LockoutEnabled = false,
                            NormalizedUserName = "JALOLIDDIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEBh9koqQapDFjuq3IOPHZJv52GB74FTqltBrRLyJlmCN7/CsPQxhYIH5ZbKnyjLaAQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Jaloliddin"
                        },
                        new
                        {
                            Id = 4L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "13f600e9-3c24-48e4-8a45-fe8afa0225c9",
                            EmailConfirmed = false,
                            FirstName = "Murod",
                            LastName = "Abdullayev",
                            LockoutEnabled = false,
                            NormalizedUserName = "MARKROFT",
                            PasswordHash = "AQAAAAIAAYagAAAAEFH+x9JghA4UmBRsnL5HcT2IO0IyOI7/Tlv7b9bWpcpr4kKKCsU65t9v8UeOzI3Usw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Markroft"
                        },
                        new
                        {
                            Id = 5L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eb197ed4-bda4-4932-a7f6-2704602051ca",
                            EmailConfirmed = false,
                            FirstName = "Samandar",
                            LastName = "Bekmurodov",
                            LockoutEnabled = false,
                            NormalizedUserName = "SAMANDAR",
                            PasswordHash = "AQAAAAIAAYagAAAAECRX8INaKnraSCDzDUS1Zs7FtcHnJskmw+bP30f3B2H2VT9ihlcMlr53a6XfX6OI9Q==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Samandar"
                        },
                        new
                        {
                            Id = 6L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "91dfc518-aea0-44ae-96f3-f848ec93a55d",
                            EmailConfirmed = false,
                            FirstName = "Saidakbar",
                            LastName = "Abdimajidov",
                            LockoutEnabled = false,
                            NormalizedUserName = "SAIDAKBAR",
                            PasswordHash = "AQAAAAIAAYagAAAAEPiXhp7K7rzMKiuCI2gXrplYQK5vKRH4oKV4fCK0Y0tIioJSlivWMQnagJRpZA/edA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Saidakbar"
                        },
                        new
                        {
                            Id = 7L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b09cce64-f2e5-4f28-8c20-90205af97b30",
                            EmailConfirmed = false,
                            FirstName = "Shohjahon",
                            LastName = "Normuminov",
                            LockoutEnabled = false,
                            NormalizedUserName = "SHOH",
                            PasswordHash = "AQAAAAIAAYagAAAAEAaA8fSAWAYIkxirxBIfXyV8w4gn2DPRBA52DfpvhSpr5gv5CbdJwMrawYMi5UVelA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Shoh"
                        });
                });

            modelBuilder.Entity("Web.data.model.Kompaniya", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nomi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Kompaniyalar");
                });

            modelBuilder.Entity("Web.data.model.Mashina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Kompaniya_Id")
                        .HasColumnType("int");

                    b.Property<string>("modei")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("rangi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("yili")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Kompaniya_Id");

                    b.ToTable("Mashinalar");
                });

            modelBuilder.Entity("Web.data.model.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Web.data.model.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("Web.data.model.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("Web.data.model.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Web.data.model.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web.data.model.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("Web.data.model.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Web.data.model.Mashina", b =>
                {
                    b.HasOne("Web.data.model.Kompaniya", "Kompaniya")
                        .WithMany("mashinalar")
                        .HasForeignKey("Kompaniya_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kompaniya");
                });

            modelBuilder.Entity("Web.data.model.Kompaniya", b =>
                {
                    b.Navigation("mashinalar");
                });
#pragma warning restore 612, 618
        }
    }
}
